{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "XXX",
  "resourcePath": "items",
  "produces": [
    "application/json",
    "*/*"
  ],
  "apis": [
    {
      "path": "api/items/{item_id}/audio_files/",
      "operations": [
        {
          "method": "POST",
          "summary": "ADD new AUDIO FILE to and ITEM",
          "nickname": "create_item_audio_file",
          "notes": "This endpoint adds an audio file to a given item<br> (Note: POST actions do not work on this page)",
          "produces": [
            "application/JSON"
          ],
          "responseClass": "List[New Audio File]",
          "authorizations": {
            "oauth2": [
              {
                "scope": "create:audio_file",
                "description": "CREATE a new AUDIO FILE item"
              }
            ]
          },
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "type": "integer",
              "description": "Item ID",
              "required": true
            }
          ]
        }
      ]
    },
    {
      "path": "api/items/{item_id}/image_files/",
      "operations": [
        {
          "method": "POST",
          "summary": "ADD new IMAGE FILE to and ITEM",
          "nickname": "create_item_image_file",
          "notes": "This endpoint adds an image file to a given item. Include a JSON object in the body of the request in the format: <br>{'image_file':{'remote_file_url':'http://www.example.com/image.jpg'}}<br> (Note: POST actions do not work on this page)",
          "produces": [
            "application/JSON"
          ],
          "responseClass": "List[New Image File]",
          "authorizations": {
            "oauth2": [
              {
                "scope": "create:image_file",
                "description": "CREATE a new IMAGE FILE item"
              }
            ]
          },
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "type": "integer",
              "description": "Item ID",
              "required": true
            }
          ]
        }
      ]
    },
    {
      "path": "api/items/{item_id}/audio_files/{audio_file_id}",
      "operations": [
        {
          "summary": "GET an AUDIO FILE",
          "nickname": "api_item_audio_file",
          "notes": "Returns fully-formed HTML with embedded player and associated audio file NOTE: Does not return JSON",
          "method": "GET",
          "responseClass": "HTML",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "type": "integer",
              "description": "Item ID",
              "required": true
            },
            {
              "paramType": "path",
              "name": "audio_file_id",
              "type": "integer",
              "description": "Audio File ID",
              "required": true
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "DELETE an AUDIO FILE by ID",
          "notes": "This endpoint removes an audio file from an item",
          "type": "void",
          "nickname": "delete_api_item_audio_file",
          "authorizations": {
            "oauth2": [
              {
                "scope": "audio_file_id:delete",
                "description": "DELETE an AUDIO FILE by ID"
              }
            ]
          },
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID of the ITEM that the ITEM belongs to",
              "type": "integer",
              "required": true
            },
            {
              "paramType": "path",
              "name": "audio_file_id",
              "description": "ID of the AUDIO FILE to DELETE",
              "type": "integer",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "code": "204",
              "message": "No Content"
            },
            {
              "code": "404",
              "message": "Not found"
            }
          ]
        }
      ]
    },
    {
      "path": "api/items/{item_id}/audio_files/{audio_file_id}/transcript",
      "operations": [
        {
          "summary": "GET a TRANSCRIPT",
          "notes": "Append an available extension to retrieve desired transcript format: .TXT , .SRT, .WEBVTT, .XML, .JSON",
          "nickname": "api_item_audio_file_transcript",
          "method": "GET",
          "responseClass": "List[Transcript]",
          "parameters": [
            {
              "paramType": "path",
              "name": "item",
              "type": "integer",
              "description": "Item ID",
              "required": true
            },
            {
              "paramType": "path",
              "name": "audio_file_id",
              "type": "integer",
              "description": "Audio File ID",
              "required": true
            }
          ]
        }
      ]
    },
    {
      "path": "api/items/{item_id}/contributions/{contributor_id}",
      "operations": [
        {
          "summary": "GET a CONTRIBUTOR",
          "notes": "Get a specific contributor for a given item",
          "nickname": "api_item_contribution",
          "method": "GET",
          "responseClass": "List[Contribution]",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "type": "integer",
              "description": "Item ID",
              "required": true
            },
            {
              "paramType": "path",
              "name": "contributor_id",
              "type": "integer",
              "description": "Contributions ID",
              "required": true
            }
          ]
        }
      ]
    },
    {
      "path": "api/items/{item_id}/entities/{entities_id}",
      "operations": [
        {
          "summary": "GET an ENTITY",
          "notes": "Get a specific entity for a given item",
          "nickname": "api_item_entity",
          "method": "GET",
          "responseClass": "List[Entity]",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "type": "integer",
              "description": "Item ID",
              "required": true
            },
            {
              "paramType": "path",
              "name": "entities_id",
              "type": "integer",
              "description": "Entities ID",
              "required": true
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "Parts": {
      "id": "Parts",
      "required": [
        "text",
        "start",
        "end"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "applicable text for the given start and end time"
        },
        "start": {
          "type": "string",
          "description": "start time of the given text block in format hh:mm:ss"
        },
        "end": {
          "type": "string",
          "description": "end time of the given text block in format hh:mm:ss"
        }
      }
    },
    "Transcript": {
      "id": "Transcript",
      "required": [

      ],
      "properties": {
        "language": {
          "type": "String",
          "description": "transcript language(s) (in locales format, e.g. en_US)"
        },
        "parts": {
          "description": "individual transcript parts",
          "type": "array",
          "items": {
            "$ref": "Parts"
          }
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "required": [
        "id",
        "name",
        "is_confirmed"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique identifier for the entity"
        },
        "name": {
          "type": "string",
          "description": "name of the identifier"
        },
        "is_confirmed": {
          "type": "boolean",
          "description": "True: Someone has validated the entity; False: Entity has not been validated"
        },
        "identifier": {
          "type": "string",
          "description": "Identies where the entity was generated"
        },
        "score": {
          "type": "integer",
          "description": "search score"
        },
        "type": {
          "type": "string",
          "description": "Type of entity (e.g. Person, Location, Entity, etc)"
        },
        "category": {
          "type": "string",
          "description": "category of the entity"
        }
      }
    },
    "Person": {
      "id": "Person",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique identifier for the contributor"
        },
        "name": {
          "type": "string",
          "description": "name of the contributor"
        }
      }
    },
    "Contribution": {
      "id": "Contribution",
      "required": [
        "id",
        "role"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique identifier for the contribution"
        },
        "role": {
          "type": "string",
          "role": "role of the contributor",
          "schema": [
            "host",
            "producer",
            "interviewer",
            "interviewee",
            "creator",
            "String"
          ]
        },
        "person": {
          "type": "array",
          "description": "one or more people that contributed in this role",
          "items": {
            "$ref": "Person"
          }
        }
      }
    }
  }
}
